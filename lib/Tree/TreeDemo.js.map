{"version":3,"sources":["../../src/components/Tree/TreeDemo.js"],"names":["TreeDemo","props","console","log","treeData","selectedIds","fileTreeData","menuData","menuSelectedIds","state","loading","defaultSelectedIds","defaultOpenIds","navData","openIds","nodeContentClick","addNodeClick","indexBarClick","updateNodes","defaultOpenLevel","setState","node","updateNode","bind","JSON","stringify","addNodeFun","checkboxClick","openIconClick","tree","asyncGetChildNode","asyncSearchNode","parentId","Component","defaultProps","getReturnData"],"mappings":"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","file":"TreeDemo.js","sourcesContent":["import React, {Component} from 'react';\nimport {Tree} from './Tree';\nimport {testTreeData, textNodeAddList, testSelectedIdsData, getNavData} from './TreeUtil';\nimport {Icon} from \"..\";\n\n/**\n * 树组件演示\n */\nclass TreeDemo extends Component {\n\n    //入参\n    static defaultProps = {\n        treeData: [], //树的节点对象集合\n        selectedIds: [], //默认选中的节点id集合\n        getReturnData: ()=>{},//获取选中的值\n    };\n\n    constructor(props) {\n        super(props);\n\n        console.log(\"TreeDemo constructor\");\n        let treeData = testTreeData(5, 20);\n        let selectedIds = testSelectedIdsData(treeData, 4);\n        let fileTreeData = testTreeData(5, 20, \"file\");\n\n        let menuData = testTreeData(2, 5);\n        let menuSelectedIds = testSelectedIdsData(menuData, 1);\n        this.state = {\n            loading: true,\n            treeData,\n            fileTreeData,\n            defaultSelectedIds: selectedIds,//入参，默认选中\n            menuData,\n            menuSelectedIds,\n            defaultOpenIds: selectedIds,//入参，默认打开\n            navData: [],\n\n            selectedIds: selectedIds,//出参，选中的节点id\n            openIds: selectedIds,//出参，打开的节点id\n            nodeContentClick: {},\n            addNodeClick: {},\n            indexBarClick: {},\n            updateNodes: [],\n            defaultOpenLevel: 1,\n        }\n    }\n\n    //点击树节点名称事件，返回的node对象\n    nodeContentClick = node => {\n        this.setState({nodeContentClick: node});\n    };\n    //复选框点击事件，返回选中的父节点们\n    checkboxClick = selectedIds => {\n        this.props.getReturnData(selectedIds);\n        this.setState({selectedIds});\n    };\n    //展开点击事件，返回展开的节点\n    openIconClick = openIds => {\n        this.setState({openIds});\n    };\n\n    //更新树\n    updateNode() {\n        let treeData = testTreeData(10, 10);\n        let selectedIds = testSelectedIdsData(treeData, 2);\n        this.setState({\n            treeData,\n            defaultSelectedIds: selectedIds,\n            defaultOpenIds: selectedIds,\n        })\n    }\n\n    //追加节点\n    addNodeFun = (parentId) => {\n        return textNodeAddList(parentId, 10);\n    };\n\n    //追加的节点点击\n    addNodeClick(node) {\n        this.setState({addNodeClick: node});\n    }\n\n    //索引节点点击\n    indexBarClick(node) {\n        this.setState({indexBarClick: node});\n    }\n\n    //更新的节点(包含新增的节点)\n    updateNodes(node) {\n        this.setState({updateNodes: node});\n    }\n\n    render() {\n        return (\n            <div className=\"ya-treeDemo\">\n                <div className=\"ya-console-area\">\n                    <h2 className=\"ya-title\">数据输出</h2>\n                    <button onClick={this.updateNode.bind(this)}>更新树</button>\n                    <br/>\n                    <div>入参：默认选中： {JSON.stringify(this.state.defaultSelectedIds)}</div>\n                    <div>入参：默认展开的层级： {this.state.defaultOpenLevel}</div>\n                    <div>选中的最大父节点:  {JSON.stringify(this.state.selectedIds)}</div>\n                    <div>打开的节点（第一次为默认打开的节点）: {JSON.stringify(this.state.openIds)}</div>\n                    <div>点击节点名称输出当前节点: {JSON.stringify(this.state.nodeContentClick)}</div>\n                    <div>追加的节点点击： {JSON.stringify(this.state.addNodeClick)}</div>\n                    <div>索引节点点击： {JSON.stringify(this.state.indexBarClick)}</div>\n                    <div>被修改的节点： {JSON.stringify(this.state.updateNodes)}</div>\n                </div>\n                <div className=\"demo\">\n                    <h1 className=\"ya-title\">各种类型的树</h1>\n                    <h2 className=\"ya-title\">多节点展开树</h2>\n                    <Tree treeData={this.state.treeData}\n                          selectedIds={this.state.defaultSelectedIds}\n                          openLevel={this.state.defaultOpenLevel}\n                          openIds={this.state.defaultOpenIds}\n\n                          checkbox={true}\n                          nodeIconBtn={true}\n                          operationBtn={true}\n                          indexBar={true}\n                          autoSearch={true}\n                          searchNum={12}\n                          draggable={true}\n                          theme={true}\n\n                          openIcon={<Icon name=\"i-folder-open\"/>}\n                          closeIcon={<Icon name=\"i-folder\"/>}\n                          childIcon={<Icon name=\"i-file\"/>}\n\n                          addNodeFun={this.addNodeFun.bind(this)}\n                          nodeContentClick={this.nodeContentClick.bind(this)}\n                          checkboxClick={this.checkboxClick.bind(this)}\n                          openIconClick={this.openIconClick.bind(this)}\n                          addNodeClick={this.addNodeClick.bind(this)}\n                          indexBarClick={this.indexBarClick.bind(this)}\n                          updateNodes={this.updateNodes.bind(this)}\n\n                          ref={tree => {\n                              this.tree = tree\n                          }}\n                    />\n                </div>\n                <div className=\"demo\">\n                    <h2 className=\"ya-title\">单层节点打开树-列表样式</h2>\n                    <Tree treeData={this.state.treeData}\n                          selectedIds={this.state.defaultSelectedIds}\n                          indexId={this.state.defaultOpenIds[0]}\n\n                          treeType={2}\n                          nodeIconBtn={true}\n                          operationBtn={true}\n                          theme={true}\n                          indexBar={true}\n                          autoSearch={true}\n                          searchNum={11}\n                          draggable={true}\n\n                          closeIcon={<Icon name=\"i-folder\"/>}\n\n                          nodeContentClick={this.nodeContentClick.bind(this)}\n                          openIconClick={this.openIconClick.bind(this)}\n                          indexBarClick={this.indexBarClick.bind(this)}\n                          updateNodes={this.updateNodes.bind(this)}\n\n                          ref={tree => {\n                              this.tree = tree\n                          }}\n                    />\n                </div>\n                <div className=\"demo\">\n                    <h2 className=\"ya-title\">单层节点打开树-平铺样式</h2>\n                    <Tree treeData={this.state.fileTreeData}\n                          treeType={2}\n                          displayMode={\"grid\"}\n\n                          openBtn={false}\n                          checkbox={true}\n                          nodeIconBtn={true}\n                          operationBtn={false}\n                          theme={true}\n                          indexBar={true}\n                          autoSearch={true}\n                          searchNum={11}\n                          draggable={true}\n\n                          nodeContentClick={this.nodeContentClick.bind(this)}\n                          checkboxClick={this.checkboxClick.bind(this)}\n                          openIconClick={this.openIconClick.bind(this)}\n                          indexBarClick={this.indexBarClick.bind(this)}\n                          updateNodes={this.updateNodes.bind(this)}\n\n                          ref={tree => {\n                              this.tree = tree\n                          }}\n                    />\n                </div>\n                <div className=\"demo\">\n                    <h2 className=\"ya-title\">菜单树</h2>\n                    <Tree treeData={this.state.menuData}\n                          indexId={this.state.menuSelectedIds[0]}\n\n                          treeType={4}\n                          operationBtn={true}\n                          openLevel={\"all\"}\n                        // indent = {false}\n                          menuStyle={\"dark\"}\n                          rightClickMenu={true}\n\n                          ref={tree => {\n                              this.tree = tree\n                          }}\n                    />\n                </div>\n                <h2 className=\"ya-title\">右侧目录树</h2>\n                <Tree treeData={this.state.navData}\n\n                      treeType={3}\n                      openBtn={false}\n                      openLevel={\"all\"}\n\n                      ref={tree => {\n                          this.tree = tree\n                      }}\n                />\n                <div className=\"demo\">\n                    <h2 className=\"ya-title\">异步树</h2>\n                    <Tree treeData={this.state.menuData}\n\n                          treeType={1}\n                          operationBtn={true}\n                          theme={true}\n                          indexBar={true}\n                          autoSearch={true}\n                          searchNum={11}\n                          draggable={true}\n\n                          childIcon={<Icon name=\"i-file\"/>}\n                          nodeContentClick={this.nodeContentClick.bind(this)}\n                          openIconClick={this.openIconClick.bind(this)}\n                          indexBarClick={this.indexBarClick.bind(this)}\n                          updateNodes={this.updateNodes.bind(this)}\n\n                          async={true}\n                          asyncGetChildNode={this.asyncGetChildNode}\n                          asyncSearchNode={this.asyncSearchNode}\n                          ref={tree => {\n                              this.tree = tree\n                          }}\n                    />\n                </div>\n                <div className=\"demo\">\n                    <h2 className=\"ya-title\">[定制功能]管理员根据部门选择人员：点击节点名称，在节点内追加节点列表，这些节点支持单选</h2>\n                    <Tree treeData={this.state.treeData}\n\n                          operationBtn={true}\n                          autoSearch={true}\n                          searchNum={12}\n                          addNodeSwitch={true}\n\n                          addNodeFun={this.addNodeFun.bind(this)}\n                          addNodeClick={this.addNodeClick.bind(this)}\n                          indexBarClick={this.indexBarClick.bind(this)}\n\n                          ref={tree => {\n                              this.tree = tree\n                          }}\n                    />\n                </div>\n\n            </div>\n        );\n    }\n\n    componentDidMount() {\n        if (this.state.loading){\n            let navData = getNavData();\n            this.setState({navData, loading: false});\n        }\n    }\n\n    //异步树，分页查询子节点方法\n    asyncGetChildNode(parentId) {\n        return textNodeAddList(parentId, 10);\n    }\n\n    //异步树，分页搜索方法\n    asyncSearchNode(node) {\n        return textNodeAddList(node.parentId, 10);\n    }\n}\n\nexport default TreeDemo"]}