{"version":3,"sources":["../../src/components/Tree/Tree.js"],"names":["Tree","props","delChangingIds","addChangingIds","data","handleData","rawData","rootNode","id","childIds","open","level","icon","iconType","ICON_TYPE_TAG","hasChild","jsonData","convertJsonFormat","i","hasOwnProperty","node","parentNode","parentId","push","openLevel","isIncrement","length","console","log","undefined","NO_PARENT","name","text","nodeName","hasOpen","select","UNSELECTED","SELECTED","selectedIds","indexOf","defaultOpen","ids","forEach","prevSelect","currentNode","currentNodeChildIds","selectedNum","semiSelectedNum","k","SEMI_SELECTED","toSelect","nextSelect","defaultSelectedNodes","getSelectIds","moveNode","dId","tId","movePosition","state","dNode","tNode","delNode","addNode","setState","dragNodeId","indexId","changingNodes","updateNodes","self","dragFcous","clearTimeout","setTimeout","dParentNode","idIndex","splice","newNode","MOVE_IN","maxSort","sort","MOVE_TOP","MOVE_BOTTOM","tParentNode","resetNodeLevel","rendering","tree","child","treeItem","TREE_SINGLE","hasNodeMark","childSort","map","item","key","itemStyle","nodeGroupStyle","indentPx","TREE_NAV","paddingLeft","indent","operationBtn","rightClick","bind","nodeContent","customize","nodeAddList","nodeContentClick","draggable","drag","onDragStart","onDragEnd","onDragOver","onDragLeave","onDrop","indexedNode","handleOpenIcon","checkbox","handleCheckBox","handleNodeIcon","handleNodeName","handleEditName","handleOperationBtn","TREE_MENU","link","len","j","d","z","thisSort","nextSort","nodeIconBtn","nodeIcon","nodeIconType","ICON_TYPE_IMG","ICON_TYPE_CLASS","obj","scrollIntoView","block","inline","addNodeSwitch","addNodeFun","openBtn","async","loadingIcon","defaultOpenIcon","defaultMenuOpenIcon","openIconSvg","childIcon","rotate","closeIcon","openIcon","openIconClick","e","openNow","getOpenIds","childNodeData","asyncGetChildNode","preventDefault","stopPropagation","openIds","editNameId","nodeNameStyle","nodeOffsetTop","getOffset","top","scrollTop","document","documentElement","clientHeight","editNameInputClick","nameInput","saveNodeName","cancelEditName","index","indexBar","list","prevId","unshift","lastIndexBarItem","IndexBarItem","indexBarClick","start","search","autoSearch","items","keyword","searchFocus","count","searchItemClick","searchNum","searchMore","autoSearchStyle","searchBlur","searchInput","displayMode","currentTarget","value","TREE_MULTI","indexedNodeScroll","indexBarScroll","selectIconSvg","zoom","selectIcon","checkboxClick","editBtnClick","delBtnClick","newNodeId","Date","getTime","op","rightClickMenu","target","oncontextmenu","fun","window","removeEventListener","onclick","button","rmcStyle","left","clientX","clientY","offsetHeight","dataTransfer","effectAllowed","resetDragStyle","targetNodeId","className","pClassName","dragY","targetTop","treeBody","dragPosition","offset","body","scrollY","scrollX","offsetTop","offsetLeft","scrollLeft","offsetParent","replace","addNodeList","addItem","addNodeClick","addNodeSelectId","init","nextProps","nextContext","treeData","Object","keys","theme","treeStyle","treeBodyStyle","menuStyle","autoScroll","_this","onscroll","callback","treeType","React","Component","defaultProps","asyncSearchNode"],"mappings":"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","file":"Tree.js","sourcesContent":["import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport './tree.css';\nimport {Icon} from \"..\";\n\n/**\n * 树组件 V0.5, 支持多节点展开、单节点打开两种形式\n * @author 简泽洋\n * @date 2019/3/19\n * @update 2019/8/1\n * @readme\n * 功能说明：\n * 1.支持多节点展开、单节点打开两种形式\n * 2.支持大量数据，1w节点数据渲染控制在1秒内，增删查改速度快，因为内部使用了以id作为key，节点对象作为value的json格式数据结构\n * 3.支持排序，以节点的sort字段排序\n * 4.支持复选框，支持默认选中\n * 5.支持默认展开，以节点id或层级\n * 6.支持操作节点：编辑、删除\n * 7.支持自动刷新，当入参变化，树会自动刷新\n * 8.支持关键字自动搜索，点击自动滚动到搜索结果\n * 9.支持节点名称拖曳排序，拖曳完成10s后焦点样式消失\n * 10.支持自定义展开关闭图标\n * 11.支持自定义节点图标，支持h5标签、图片、class名称三种类型\n * 12.支持点击按钮或者右击菜单，在节点上、中、下新增节点\n * 13.支持异步节点、异步搜索.注：异步打开时，多节点展开树会影响默认打开会失效\n * 14.支持点击节点名称【组织机构选人的业务定制】，追加带单选框的节点列表，可以单选\n *\n * 容错说明：\n * 1.第一层节点支持多个，第一层节点的父节点可以没有或者为null，或者不是同一个父节点。因为内部构造了一个虚拟根节点\n * 2.节点的id和父节点parentId不限制数据类型\n *\n * 使用注意：\n * 1.因为树支持自动刷新，树的选中、打开、索引id（单节点树打开的节点）、追加的节点单选等依赖父组件，树组件本身不存储状态值，所以改变入参时，\n * 2.父组件需要自行存储这些值，一并传入才可以维持上一个树状态，这样设计等目的是为了把状态维护交给使用者，减少组件强定义\n *\n */\n\nclass Tree extends React.Component {\n\n    //入参\n    static defaultProps = {\n        treeData: [], //树的节点对象集合\n        treeType: 1,//树类型，默认多节点展开树，1多节点展开树，2单节点打开树，3导航栏树，4菜单树\n        selectedIds: [], //默认选中的节点id集合\n        openIds: [], //默认打开的节点id集合\n        indexId: \"\",//要索引的id（单节点树打开的节点）\n        openLevel: 0, //默认打开的层级, all表示全部展开\n        searchNum: 10, //自动关键字搜索默认数量\n        openIcon: \"\",//父节点展开图标\n        closeIcon: \"\",//父节点关闭图标\n        childIcon: \"\",//子节点图标\n        menuStyle: \"\",//菜单树主题\n\n        //回调事件\n        nodeContentClick: function () {\n        }, //点击节点，回调父组件方法，回调入参为节点对象\n        checkboxClick: function () {\n        }, //复选框点击，回调父组件方法，回调入参为选中的最大父节点们\n        openIconClick: function () {\n        }, //打开按钮点击，回调父组件方法，回调入参为打开的节点\n        editBtnClick: function () {\n        }, //点击编辑，回调父组件方法，回调入参为节点对象\n        delBtnClick: function () {\n        }, //点击删除，回调父组件方法，回调入参为节点对象\n        indexBarClick: function () {\n        }, //点击索引节点，回调父组件方法，回调入参为节点对象\n        searchItemClick: function () {\n        }, //点击搜索结果，回调父组件方法，回调入参为节点对象\n        updateNodes: function () {\n        }, //移动/编辑节点，回调父组件方法，回调入参为更新的节点对象\n\n        //功能开关\n        displayMode: \"\",//展示方式，列表展示或格子平铺展示\n        async: false,//是否开启异步节点\n        openBtn: true, // 展开按钮\n        checkbox: false, //复选框\n        nodeIconBtn: false, //节点图标\n        operationBtn: false, //操作按钮\n        theme: false,//默认主题开关\n        indexBar: false,//索引条开关\n        autoSearch: false, //自动关键字搜索开关\n        indent: true, //层级缩进\n        draggable: false, //拖曳排序开关\n        rightClickMenu: false,//右键菜单\n        hasNodeMark: \"hasNodeMark\",//声明有子节点可以打开节点的字段，数据为布尔类型\n\n        asyncGetChildNode: function () {\n        },//开启异步，获取子节点数据方法\n        asyncSearchNode: function () {\n        },//开启异步，获取搜索结果数据方法\n\n        //定制功能：追加节点，支持单选\n        addNodeSwitch: false,\n        addNodeFun: function () {\n        },//点击节点名称，追加节点的方法,回调入参为父节点id\n        addNodeClick: function () {\n        },//点击追加的节点名称，回调父组件方法，回调入参为节点对象\n    };\n\n    static UNSELECTED = 1;//非选中状态\n    static SELECTED = 2;//选中状态\n    static SEMI_SELECTED = 3;//半选状态\n    static NO_PARENT = \"noParent\";//父节点不存在\n    static MOVE_TOP = 1;//拖曳到目标节点上\n    static MOVE_IN = 2;//拖曳到目标节点内部\n    static MOVE_BOTTOM = 3;//拖曳到目标节点下\n    static ICON_TYPE_TAG = 1;//节点图片类型-h5标签或react对象/组件\n    static ICON_TYPE_IMG = 2;//节点图片类型-图片地址\n    static ICON_TYPE_CLASS = 3;//节点图片类型-样式\n\n    delChangingIds = []; //删除节点引起变化的节点\n    addChangingIds = []; //新增节点引起变化的节点（暂时存储，点保存才使用）\n\n    constructor(props) {\n        super(props);\n\n        //默认打开（索引）时开启自动滚动\n        if (this.props.indexId) this.indexBarScroll = true;\n        this.indexedNodeScroll = true;\n\n        //初始化\n        this.state = {\n            // treeData: this.props.treeData,\n            jsonData: this.init(this.props),\n            selectedIds: this.props.selectedIds || [],\n            openIds: this.props.openIds || [],\n            indexId: this.props.indexId,//索引id（单节点树打开的节点）\n            searchNum: this.props.searchNum || 10,\n\n            displayMode: this.props.displayMode,\n            keyword: \"\",//搜索关键字\n            searchFocus: false,//搜索区是否激活\n            dragNodeId: \"\",//拖曳的节点id\n            editNameId: \"\",//编辑中的节点id\n            addNodeSelectId: \"\",//新增的节点单选的id\n            scrollTop: 0,//滚动的top\n            rightClickMenu: \"\"//右键菜单\n        };\n\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps, nextContext) {\n\n        //入参变化时更新树\n        if (this.props.treeData !== nextProps.treeData || this.props.selectedIds !== nextProps.selectedIds ||\n            this.props.openIds !== nextProps.openIds || this.props.indexId !== nextProps.indexId) {\n            //更新树\n            this.setState({\n                jsonData: this.init(nextProps) || [],\n                selectedIds: nextProps.selectedIds || [],\n                openIds: nextProps.openIds || []\n            });\n        }\n    }\n\n    /*static getDerivedStateFromProps(nextProps, prevState) {\n        const {treeData, selectedIds, openIds, indexId} = nextProps;\n        // 入参变化时更新树\n        if (treeData !== prevState.treeData || selectedIds !== prevState.selectedIds || openIds !== prevState.openIds || indexId !== prevState.indexId) {\n            //更新树\n            return {\n                treeData,\n                selectedIds,\n                openIds,\n                indexId,\n            };\n        }\n        // 否则，对于state不进行任何操作\n        return null;\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        //渲染前计算\n        if (nextState.treeData !== this.state.treeData) {\n            let jsonData = this.init(nextProps);\n            this.setState({jsonData});\n        }\n        return true;\n    }*/\n\n    render() {\n        let jsonData = {...this.state.jsonData};\n        if (!this.props.treeData || this.props.treeData.length === 0 || Object.keys(jsonData).length === 0) return null;\n        let theme = this.props.theme ? \"theme \" : \"\";\n        let treeStyle = \"ya-tree \" + theme + this.state.displayMode;\n\n        let treeBodyStyle = \"ya-treeBody\";\n        if (this.TREE_MENU) treeBodyStyle += \" ya-menuTree \" + this.props.menuStyle;\n        if (this.TREE_NAV) treeBodyStyle += \" ya-nav \";\n        return <div className={treeStyle}>\n            {this.props.indexBar ? this.index.indexBar(jsonData) : \"\"}\n            {this.search.autoSearch(jsonData)}\n            <div className={treeBodyStyle} ref={treeBody => this.treeBody = treeBody}>\n                {this.rendering.tree(jsonData, !this.TREE_SINGLE ? this.rootNode.childIds : null)}\n            </div>\n            {this.state.rightClickMenu}\n        </div>;\n    }\n\n    componentDidMount() {\n        //初始化时自动滚动\n        this.autoScroll();\n\n        //导航目录树滚动跟随\n        let _this = this;\n        if (this.TREE_NAV) {\n            window.onscroll = function () {\n                let scrollTop = document.documentElement.scrollTop || document.body.scrollTop;//滚动条y轴上的距离\n                _this.setState({scrollTop: scrollTop})\n            };\n        }\n    }\n\n    componentWillUnmount() {\n        window.document.body.scrollIntoView({\n            block: \"start\",\n            inline: \"nearest\"\n        });\n        // 卸载异步操作设置状态\n        this.setState = (state, callback) => {\n            return \"\";\n        }\n    }\n\n    init(props) {\n        let jsonData = {};\n        let treeData = props.treeData;\n\n        this.TREE_MULTI = this.props.treeType === 1;\n        this.TREE_SINGLE = this.props.treeType === 2;\n        this.TREE_NAV = this.props.treeType === 3;\n        this.TREE_MENU = this.props.treeType === 4;\n\n        if (treeData.length > 0) {\n            //数据优化\n            jsonData = this.data.handleData(treeData);\n\n            if (jsonData !== {} && props.selectedIds && props.selectedIds.length > 0) {\n                //默认打开\n                jsonData = this.data.defaultOpen(props.openIds, jsonData);\n\n                //默认选中\n                jsonData = this.data.defaultSelectedNodes(props.selectedIds, jsonData);\n            }\n        }\n        return jsonData;\n    }\n\n    data = {\n        //数据优化\n        handleData: (rawData) => {\n\n            //初始化虚拟根节点\n            this.rootNode = {\n                id: \"rootNode\",\n                childIds: [],\n                open: true,\n                level: 0,\n                icon: \"\",\n                iconType: Tree.ICON_TYPE_TAG,\n                hasChild: false,//是否可以打开\n            };\n\n            //优化查询，转换为json格式，以node[i]方式获取某一个节点数据\n            let jsonData = {};\n            jsonData = this.data.convertJsonFormat([...rawData], jsonData);\n\n            //第一次循环：计算属性\n            for (let i in jsonData) {\n\n                if (jsonData.hasOwnProperty(i)) {\n\n                    let node = jsonData[i], parentNode = jsonData[node.parentId];\n\n                    //记录每个节点的子节点id集合\n                    if (parentNode) {\n                        parentNode.childIds.push(node.id);\n                    } else {\n                        //父节点不存在的节点,作为第一层节点\n                        this.rootNode.childIds.push(node.id);\n                    }\n\n                    //计算层级方法\n                    if (parentNode && parentNode.level) {\n                        //如果父节点存在，且父节点已经算过，那么当前节点的层级是父节点层级+1\n                        node.level = parentNode.level + 1;\n                    } else {\n                        //向上找父节点，直到父节点不存在，记录找到父节点的次数即层级\n                        let level = 1;//定义层级，默认从第一层开始\n                        let parentId = node.parentId;\n                        while (jsonData[parentId]) {\n                            level++;\n                            parentId = jsonData[parentId].parentId;//获取上一个父级ID\n                        }\n                        node.level = level;\n                    }\n\n                    //默认打开的层级\n                    if (this.props.openLevel >= node.level || this.props.openLevel === \"all\") jsonData[i].open = true;\n                }\n            }\n            return jsonData;\n        },\n\n        //转换json格式,支持增量\n        convertJsonFormat: (data, jsonData, isIncrement) => {\n            for (let i = 0; i < data.length; i++) {\n\n                let node = {...data[i]};//防止组件复用时，对象数组的对象引用的同一个堆造成的值改变联动\n                let id = node.id;\n                let parentId = node.parentId;\n\n                //防止父id和子id相等造成的死循环\n                if (id === parentId) console.log(\"参数有误，存在相同id和parentId，节点为：\" + data[i]);\n                //容错：父节点异常情况\n                if (node.parentId === undefined || node.parentId === null) node.parentId = Tree.NO_PARENT;\n                //容错：兼容节点名称不统一\n                if (node.name === undefined) node.name = node.name || node.text || node.nodeName;\n\n                //设置初始化属性\n                node.childIds = [];\n                node.level = false;\n                node.open = false;\n                node.hasOpen = false;//打开过,减少渲染未打开的节点\n                node.select = Tree.UNSELECTED;\n                jsonData[id] = node;\n\n                //增量时，直接计算属性\n                if (isIncrement) {\n                    //父节点记录子节点id\n                    let parentNode = jsonData[node.parentId];\n                    if (parentNode) {\n                        parentNode.childIds.push(node.id);\n                    } else {\n                        //父节点不存在的节点,作为第一层节点\n                        this.rootNode.childIds.push(node.id);\n                    }\n\n                    //设置层级\n                    if (parentNode) {\n                        jsonData[id].level = jsonData[node.parentId].level + 1;\n                    } else {\n                        jsonData[id].level = 1;\n                    }\n                    //是否默认打开:异步开启时，默认打开会失效，增量节点默认不自动打开\n                    //是否默认选中:1.父节点默认选中，2.默认选中的节点\n                    if (jsonData[node.parentId].select === Tree.SELECTED || this.props.selectedIds.indexOf(node.id) > -1) jsonData[id].select = Tree.SELECTED;\n                }\n            }\n            return jsonData;\n        },\n\n        //默认打开\n        defaultOpen: (ids, jsonData) => {\n            ids.forEach(id => {\n                //打开当前节点(有子节点时)\n                let node = jsonData[id];\n                if (node.childIds > 0) jsonData[id].open = true;\n\n                let parentNode = jsonData[node.parentId];\n                while (parentNode) {\n                    //向上打开父节点\n                    parentNode.open = true;\n                    parentNode.hasOpen = true;\n                    parentNode = jsonData[parentNode.parentId];\n                }\n            });\n\n            return jsonData;\n        },\n\n        //向上选中\n        prevSelect: (jsonData, id, select) => {\n\n            //向上节点的半选和选中、取消选中\n            let node = jsonData[id];\n            let parentNode = jsonData[node.parentId];\n            while (parentNode) {\n                //向上更改父节点选中状态，直到父节点不存在\n                let currentNode = parentNode;\n\n                //计算上一个父节点的子节点选中、半选的节点数目\n                let currentNodeChildIds = currentNode.childIds;\n                let selectedNum = 0;\n                let semiSelectedNum = 0;\n                currentNodeChildIds.forEach(k => {\n                    if (jsonData[k].select === Tree.SELECTED) {\n                        selectedNum++;\n                    } else if (jsonData[k].select === Tree.SEMI_SELECTED) {\n                        semiSelectedNum++;\n                    }\n                });\n\n                //当前节点（上一个父亲节点）的状态改变，以下用\"当前\"描述上一个父亲节点，用\"当前下\"描述上一个父亲节点的子节点们\n                let toSelect;\n                if (select === Tree.UNSELECTED) {\n\n                    //操作是取消选中，当前下无选中且无半选，当前才会变成取消，否则半选，不可能是全选\n                    toSelect = selectedNum === 0 && semiSelectedNum === 0 ? Tree.UNSELECTED : Tree.SEMI_SELECTED;\n                } else if (select === Tree.SELECTED) {\n\n                    //操作是选中,当前下全选,当前才会变成选中，否则半选，不可能是全选\n                    if (currentNodeChildIds.length === selectedNum) {\n                        toSelect = Tree.SELECTED;\n                    } else {\n                        toSelect = Tree.SEMI_SELECTED;\n                    }\n                }\n                currentNode.select = toSelect;\n\n                //设置上一个节点id\n                parentNode = jsonData[currentNode.parentId];\n            }\n\n            return jsonData;\n        },\n\n        //向下选中\n        nextSelect: (jsonData, id, select) => {\n\n            jsonData[id].select = select;\n            //子节点选中\n            jsonData[id].childIds.forEach(i => {\n                this.data.nextSelect(jsonData, i, select);\n            });\n            return jsonData;\n        },\n\n        //默认选中\n        defaultSelectedNodes: (ids, jsonData) => {\n\n            let select = Tree.SELECTED;\n            ids.forEach(id => {\n                if (jsonData[id]) {\n                    //当前选中\n                    jsonData[id].select = select;\n                    //向上变化\n                    jsonData = this.data.prevSelect(jsonData, id, select);\n                    //向下变化\n                    jsonData = this.data.nextSelect(jsonData, id, select);\n                }\n            });\n\n            return jsonData;\n        },\n\n        //获取选中的最大父节点们\n        getSelectIds: (jsonData) => {\n            let selectedIds = [];\n            for (let i in jsonData) {\n                if (jsonData.hasOwnProperty(i)) {\n                    let node = jsonData[i];\n                    if (node.select === Tree.SELECTED && (jsonData[node.parentId] === undefined || jsonData[node.parentId].select !== Tree.SELECTED)) {\n                        selectedIds.push(node.id);\n                    }\n                }\n            }\n            return selectedIds;\n        },\n\n        //节点移动\n        moveNode: (dId, tId, movePosition) => {\n            if (dId === tId) return;\n\n            let jsonData = {...this.state.jsonData};\n            let dNode = jsonData[dId];\n            let tNode = jsonData[tId] || this.rootNode;\n\n            this.data.delNode(dNode, tNode, movePosition, jsonData); //从原处移除当前节点\n            this.data.addNode(dNode, tNode, movePosition, jsonData);//在目标节点处新增\n            this.setState({jsonData, dragNodeId: dId, indexId: dId});\n\n            let changingNodes = [];\n            //删除引起的变化节点\n            for (let i in this.delChangingIds) {\n                changingNodes.push(jsonData[this.delChangingIds[i]]);\n                this.delChangingIds = [];\n            }\n            //新增引起的变化节点\n            for (let i in this.addChangingIds) {\n                changingNodes.push(jsonData[this.addChangingIds[i]]);\n                this.addChangingIds = [];\n            }\n            this.props.updateNodes(changingNodes);\n\n            //逐渐隐藏节点焦点\n            let self = this;\n            if (this.dragFcous) clearTimeout(this.dragFcous);\n            this.dragFcous = setTimeout(() => {\n                self.setState({dragNodeId: ''})\n            }, 10000);\n\n        },\n\n        //删除当前节点\n        delNode: (dNode, jsonData) => {\n\n            let dParentNode = jsonData[dNode.parentId] || this.rootNode;\n            let idIndex = dParentNode.childIds.indexOf(dNode.id);\n            if (idIndex > -1) dParentNode.childIds.splice(idIndex, 1);\n            delete jsonData[dNode.id];\n\n            this.delChangingIds.push(dParentNode.id);\n            this.delChangingIds.push(dNode.id);\n        },\n\n        //在目标节点处新建\n        addNode: (newNode, tNode, movePosition, jsonData) => {\n\n            jsonData[newNode.id] = newNode;\n            if (movePosition === Tree.MOVE_IN) {\n                //新建到目标节点内\n\n                //目标节点子集ids增加拖动的节点\n                if (!tNode.childIds) tNode.childIds = [];\n                tNode.childIds.push(newNode.id);\n                tNode.open = true;\n\n                //追加到最后\n                let maxSort = jsonData[tNode.childIds[0]].sort;\n                tNode.childIds.forEach(id => {\n                    if (jsonData[id].sort > maxSort) maxSort = jsonData[id].sort;\n                });\n                newNode.sort = maxSort + 1;\n\n                newNode.parentId = tNode.id;\n                newNode.level = tNode.level + 1;\n\n                this.addChangingIds.push(tNode.id);//记录变化节点id（目标节点）\n\n            } else if (movePosition === Tree.MOVE_TOP || movePosition === Tree.MOVE_BOTTOM) {\n                //新建到目标节点上、下\n\n                //目标节点之后节点后移（先空出位置）\n                let tParentNode = jsonData[tNode.parentId] || this.rootNode;\n                tParentNode.childIds.forEach(id => {\n                    if (jsonData[id].sort > tNode.sort) {\n                        ++jsonData[id].sort;\n                        this.addChangingIds.push(id);//记录变化节点id（新建/拖动到目标节点处，引起的排序变化的节点）\n                    }\n                });\n\n                if (movePosition === Tree.MOVE_TOP) {\n                    newNode.sort = tNode.sort || 0;\n                    if (tNode.sort) ++tNode.sort;//目标节点后移，排序值+1\n                    this.addChangingIds.push(tNode.id);//记录变化节点id（拖动到目标节点处，目标节点后移）\n                } else {\n                    newNode.sort = (tNode.sort || 0) + 1;\n                }\n\n                newNode.parentId = tNode.parentId;\n                tParentNode.childIds.push(newNode.id);\n\n                newNode.level = tNode.level;\n            }\n\n            jsonData[newNode.id] = newNode;\n\n            //此节点及其子节点层级重新计算\n            this.data.resetNodeLevel(jsonData, newNode.id);\n            return jsonData;\n        },\n\n        //此节点的子节点层级重新计算\n        resetNodeLevel: (jsonData, id) => {\n            let parentNode = jsonData[jsonData[id].parentId] || this.rootNode;\n            jsonData[id].level = parentNode.level + 1;\n            //如果还有子节点\n            jsonData[id].childIds.forEach(i => {\n                this.data.resetNodeLevel(jsonData, i);\n            });\n        },\n\n    };\n\n    rendering = {\n        //渲染多节点展开树\n        tree: (jsonData, child) => {\n            let treeItem;\n            if (this.TREE_SINGLE) {\n                let node = jsonData[this.state.indexId];\n                if (node) {\n\n                    child = node.childIds;\n                    if (!node[this.props.hasNodeMark]) {\n                        //节点属性不可以打开，且打开的节点没有子节点，或者索引的id和拖曳的id相等，则默认打开父级，此节点显示选中样式\n                        let parentNode = jsonData[node.parentId] || this.rootNode;\n                        if ((child.length === 0 || this.state.indexId === this.state.dragNodeId)) child = parentNode.childIds;\n                    } else {\n                        //如果可以打开、但没有子节点\n                        if (child && child.length === 0) {\n                            return <div className=\"noData\">\n                                <Icon name=\"i--expressionless\"/>\n                                <div>No Data</div>\n                            </div>;\n                        }\n                    }\n                } else {\n                    child = this.rootNode.childIds;\n                }\n            }\n            if (child) {\n                //排序\n                child = this.rendering.childSort(child, jsonData);\n                // 子元素是数组的形式，把所有的子元素循环出来\n                treeItem = child.map((item, key) => {\n\n                    let node = jsonData[item];\n                    if (node) {\n\n                        let itemStyle, nodeGroupStyle;\n                        if (!this.TREE_SINGLE) {\n\n                            let parentNode = jsonData[node.parentId];\n                            // 父节点未打开，且从未打开过的节点，不渲染\n                            if (parentNode && !parentNode.open && !parentNode.hasOpen) return null;\n\n                            //子节点隐藏\n                            nodeGroupStyle = \"node-group animated fastest \" + (node.open ? \"fadeInDownSmall ya-show\" : \"ya-hide\");\n\n                            // 根据层级缩进\n                            let indentPx = 25;\n                            if (this.TREE_NAV) indentPx = 11;\n                            itemStyle = {paddingLeft: indentPx * (node.level - 1) + 'px'};\n                            if (!this.props.indent) itemStyle = {};//关闭缩进\n                        }\n\n                        return (\n                            <div key={key} className=\"node\" onMouseDown={this.operationBtn.rightClick.bind(this, node)}>\n                                {this.rendering.nodeContent(node, itemStyle)}\n                                <div className={nodeGroupStyle}>\n                                    {!this.TREE_SINGLE ? this.rendering.tree(jsonData, node.childIds) : null}\n                                    {this.customize.nodeAddList(node.id, jsonData)}\n                                </div>\n                            </div>);\n                    } else {\n                        console.log(\"子节点\" + item + \"不存在或被删除\");\n                    }\n                    return null;\n                })\n            }\n            return treeItem;\n        },\n\n        nodeContent: (node, itemStyle) => {\n            let nodeContent = <div\n                className={\"node-content \" + ( (this.state.indexId === node.id || this.state.dragNodeId === node.id) ? \"nodeFocus \": \"\"  ) + (node.select === Tree.SELECTED ? \"selected\": \"\")}\n                style={itemStyle}\n                onClick={this.nodeContentClick.bind(this, node)}\n                draggable={this.props.draggable}\n                onDragStart={this.drag.onDragStart.bind(this, node.id)}\n                onDragEnd={this.drag.onDragEnd.bind(this, node.id)}\n                onDragOver={this.props.draggable ? this.drag.onDragOver.bind(this, node.id) : () => {\n                }}\n                onDragLeave={this.drag.onDragLeave.bind(this, node.id)}\n                onDrop={this.drag.onDrop.bind(this, node.id)}\n                ref={indexedNode => this.state.indexId === node.id ? this.indexedNode = indexedNode : {}}>\n                {this.open.handleOpenIcon(node)}\n                {this.checkbox.handleCheckBox(node)}\n                {this.handleNodeIcon(node)}\n                {this.nodeName.handleNodeName(node)}\n                {this.nodeName.handleEditName(node)}\n                {this.operationBtn.handleOperationBtn(node)}\n            </div>;\n\n            if (this.TREE_MENU && node.link) nodeContent = <Link to={node.link}>{nodeContent}</Link>;\n            return nodeContent;\n        },\n        //根据排序字段排序(冒泡排序)\n        childSort(child, jsonData) {\n            let len = child.length, i, j, d;\n            if (len === 0) return child;\n            for (i = len; i--;) {\n                for (j = 0; j < i; j++) {\n                    let z = j + 1;//下一个\n                    let thisSort = jsonData[child[j]].sort || 0;\n                    let nextSort = jsonData[child[z]].sort || 0;\n                    if (thisSort > nextSort) {\n                        //排序字段大的在后面\n                        d = child[j];\n                        child[j] = child[z];\n                        child[z] = d;\n                    }\n                }\n            }\n            return child;\n        }\n    };\n\n    //处理节点图标\n    handleNodeIcon = (node) => {\n        if (!this.props.nodeIconBtn) return null;\n        let nodeIcon = node.icon;\n\n        //节点未设置图标时，设置默认图标\n        if (!nodeIcon) {\n            nodeIcon = node.childIds.length > 0 || node[this.props.hasNodeMark] ? <Icon name=\"i-folder\"/> :\n                <Icon name=\"i-file\"/>\n        }\n\n        let nodeIconType = node.iconType || Tree.ICON_TYPE_TAG;\n\n        //根据图标类型\n        if (nodeIconType === Tree.ICON_TYPE_IMG) nodeIcon =\n            <img className=\"nodeIconImg\" src={nodeIcon} alt={nodeIcon}/>;\n        if (nodeIconType === Tree.ICON_TYPE_CLASS) nodeIcon = <span className={node.icon}> </span>;\n\n        return <span className=\"ya-nodeIcon\">{nodeIcon}</span>;\n    };\n\n    //节点点击\n    nodeContentClick = (node) => {\n\n        //导航栏树锚点\n        if (this.TREE_NAV) {\n            node.obj.scrollIntoView({block: \"center\", inline: \"nearest\"});\n            return;\n        }\n        let jsonData = {...this.state.jsonData};\n        if (node.childIds.length > 0 || this.props.addNodeSwitch) node.open = !node.open;\n\n        //当前节点索引\n        if (!node) node = this.rootNode;//id不存在默认回第一级\n        let indexId = node.id;\n\n        this.setState({indexId, jsonData});\n\n        //[定制功能]点击名称追加节点\n        if (this.props.addNodeSwitch) this.customize.addNodeFun(node.id, jsonData);\n        this.props.nodeContentClick(node);\n    };\n\n    open = {\n        //处理打开图标\n        handleOpenIcon: (node) => {\n            if (!this.props.openBtn) return null;\n\n            //异步加载图标\n            if (node.async) {\n                let loadingIcon = <Icon name=\"i-loading-min\"/>;\n                return <span className=\"openIcon ya-rotationInfinite\">{loadingIcon}</span>;\n            }\n\n            //默认图标\n            let defaultOpenIcon = <Icon name=\"i-BAI-youjiantou\"/>;\n            let defaultMenuOpenIcon = <Icon name=\"i-BAI-shangjiantou\"/>;\n\n            let openIconSvg = this.props.childIcon || \"\", rotate = \"\";\n            //计算后节点有子节点，或者有存在子节点标识\n            if (node.childIds.length > 0 || node[this.props.hasNodeMark]) {\n                openIconSvg = this.props.closeIcon || (this.TREE_MENU ? defaultMenuOpenIcon : defaultOpenIcon);\n                if (node.open) {\n                    openIconSvg = this.props.openIcon || openIconSvg;\n                    if (!this.props.closeIcon) rotate = this.TREE_MENU ? \"ya-rotateX180\" : \"ya-rotate90\";//使用默认图标、节点打开时添加旋转动效\n                }\n            }\n\n            let openIcon = 'openIcon ' + rotate + \" \" + (this.TREE_MENU ? \"ya-floatRight\" : \"\");\n            return <span className={openIcon}\n                         onClick={this.open.openIconClick.bind(this, node.id)}>{openIconSvg}</span>;\n        },\n\n        //打开事件\n        openIconClick: (id, e) => {\n\n            let jsonData = {...this.state.jsonData};\n            jsonData[id].open = !jsonData[id].open;\n\n            //开启节点异步且节点没有打开过\n            let openNow = this.props.async && !jsonData[id].hasOpen;\n            if (openNow) {\n                jsonData[id].async = true;\n            }\n\n            //非异步时立即设置为打开过\n            if (!this.props.async) jsonData[id].hasOpen = true;\n            if (this.TREE_SINGLE) {\n\n                this.setState({jsonData, indexId: id});\n                //打开的节点\n                this.props.openIconClick([id]);\n            } else {\n\n                this.setState({jsonData});\n                //打开的节点们\n                this.props.openIconClick(this.open.getOpenIds(jsonData));\n            }\n\n            if (openNow) {\n                setTimeout(() => {\n                    let childNodeData = this.props.asyncGetChildNode(id);\n                    if (childNodeData) {\n                        //转换json数据并记录\n                        this.data.convertJsonFormat(childNodeData, jsonData, true);\n                        //关闭节点异步\n                        jsonData[id].async = false;\n                        //设置为打开过\n                        jsonData[id].hasOpen = true;\n                        this.setState({jsonData});\n                    }\n                }, 400);\n\n            }\n\n            e.preventDefault();\n            e.stopPropagation();\n        },\n\n        //获取打开的节点IDs\n        getOpenIds: (jsonData) => {\n            let openIds = [];\n            for (let i in jsonData) {\n                if (jsonData.hasOwnProperty(i)) {\n                    if (jsonData[i].open) openIds.push(jsonData[i].id);\n                }\n            }\n            return openIds;\n        }\n    };\n\n    nodeName = {\n        //处理节点名称\n        handleNodeName: (node) => {\n            if (this.state.editNameId === node.id) return null;\n\n            let nodeNameStyle = \"nodeName\";\n            //菜单树节点名称前没有图标，增加间隙\n            if (this.TREE_MENU) {\n                nodeNameStyle += \" ya-padding-left10\";\n            }\n            if (this.TREE_NAV) {\n                let nodeOffsetTop = this.drag.getOffset(node.obj, false).top;\n                if (this.state.scrollTop >= nodeOffsetTop && this.state.scrollTop <= (nodeOffsetTop + document.documentElement.clientHeight)) {\n                    nodeNameStyle += \" active\";\n                }\n                // console.log(this.state.scrollTop, nodeOffsetTop, document.documentElement.clientHeight)\n            }\n            return <span className={nodeNameStyle}>\n                    <span>{node.name}</span>\n                </span>\n        },\n\n        //处理节点名称编辑\n        handleEditName: (node) => {\n            if (this.state.editNameId !== node.id) return null;\n            return <span className=\"ya-editNodeName\">\n                    <input type=\"text\" className=\"ya-nameInput\" defaultValue={node.name} maxLength=\"20\"\n                           onClick={this.nodeName.editNameInputClick.bind(this)}\n                           ref={nameInput => this.nameInput = nameInput}/>\n                    <span className=\"ya-editOK\"\n                          onClick={this.operationBtn.saveNodeName.bind(this, node.id)}><Icon name=\"i-ok\"/></span>\n                    <span className=\"ya-cancel\"\n                          onClick={this.operationBtn.cancelEditName.bind(this, node)}><Icon name=\"i-close\"/></span>\n                </span>\n        },\n        //名称编辑输入框事件\n        editNameInputClick: (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n        }\n    };\n\n    index = {\n        //渲染索引条\n        indexBar: (jsonData) => {\n            let id = this.state.indexId;\n            let list = [];\n            if (id) {\n                if (jsonData[id]) {\n                    let prevId = id;\n                    while (jsonData[prevId]) {\n                        let node = jsonData[prevId];\n                        list.unshift(<span key={node.id} className=\"item node-group animated fastest fadeInLeft\"\n                                           ref={IndexBarItem => this.lastIndexBarItem = IndexBarItem}\n                                           onClick={this.index.indexBarClick.bind(this, node)}\n                                           onDragEnd={this.drag.onDragEnd.bind(this, node.id)}\n                                           onDragOver={this.drag.onDragOver.bind(this, node.id)}\n                                           onDragLeave={this.drag.onDragLeave.bind(this, node.id)}\n                                           onDrop={this.drag.onDrop.bind(this, node.id)}\n                        >{node.name}</span>);\n                        prevId = jsonData[prevId].parentId;//获取上一个父级ID\n                    }\n                }\n            }\n            let start = (<span key=\"root\" className=\"item\">\n            <span className=\"indexBarName\"\n                  onClick={this.index.indexBarClick.bind(this, false)}\n                  onDragEnd={this.drag.onDragEnd.bind(this, false)}\n                  onDragOver={this.drag.onDragOver.bind(this, false)}\n                  onDragLeave={this.drag.onDragLeave.bind(this, false)}\n                  onDrop={this.drag.onDrop.bind(this, false)}\n            ><Icon name=\"i-BAI-wuzi\"/></span></span>);\n            list.unshift(start);\n            return <div className=\"ya-indexBar\" key=\"indexBar\">{list}</div>\n        },\n\n        //索引点击事件\n        indexBarClick: (node, e) => {\n            if (node) {\n                this.setState({indexId: node.id});\n            } else {\n                this.setState({indexId: this.rootNode.id});\n            }\n\n            this.props.indexBarClick(node || {});\n            e.preventDefault();\n        },\n    };\n\n    search = {\n        //渲染自动搜索\n        autoSearch: (jsonData) => {\n            if (!this.props.autoSearch) return null;\n\n            let items = [];\n            if (this.state.keyword && this.state.searchFocus) {\n                let count = 0;\n                for (let i in jsonData) {\n                    if (jsonData.hasOwnProperty(i) && jsonData[i].name.indexOf(this.state.keyword) > -1) {\n                        let node = jsonData[i];\n                        items.push(<div className=\"searchItem animated fastest fadeInDownSmall\" key={node.id}\n                                        onMouseDown={this.search.searchItemClick.bind(this, node, jsonData)}>{node.name}</div>);\n                        count++;\n                        if (count > this.state.searchNum) {\n                            items.push(<div className=\"searchItem animated fastest fadeInDownSmall\" key=\"searchMore\"\n                                            onMouseDown={this.search.searchMore.bind(this)}>......</div>);\n                            break;\n                        }\n                    }\n                }\n            }\n\n            let autoSearchStyle = \"ya-autoSearch \" + (this.state.searchFocus ? \"searchFocus\": \"\");\n            return <div className=\"ya-treeTools\">\n                <div className={autoSearchStyle} key=\"autoSearch\" onBlur={this.search.searchBlur}>\n                    <span className=\"searchIcon\"><Icon name=\"i-magnifier\"/></span>\n                    <input className=\"searchInput\" type=\"text\" id=\"searchInput\" value={this.state.keyword}\n                           onChange={this.search.searchInput.bind(this)} autoComplete=\"off\"\n                           onFocus={this.search.searchInput.bind(this)}/>\n                    <div className=\"resultList\">{items}</div>\n                </div>\n                {this.state.displayMode === \"list\" ? <div className=\"displayMode\" onClick={() => {\n                    this.setState({displayMode: \"grid\"})\n                }}><Icon name=\"i-mode-list\"/></div> : \"\"}\n                {this.state.displayMode === \"grid\" ? <div className=\"displayMode\" onClick={() => {\n                    this.setState({displayMode: \"list\"})\n                }}><Icon name=\"i-mode-grid\"/></div> : \"\"}\n            </div>\n        },\n\n        //搜索更多\n        searchMore: (e) => {\n            this.setState({searchNum: this.state.searchNum + 10, searchFocus: true,});\n            e.preventDefault();\n        },\n\n        //搜索输入和聚焦事件\n        searchInput: (e) => {\n            this.setState({keyword: e.currentTarget.value, searchFocus: true, searchNum: this.props.searchNum || 10});\n        },\n\n        //搜索失去焦点\n        searchBlur: () => {\n            this.setState({searchFocus: false});\n        },\n\n        searchItemClick: (node, jsonData, e) => {\n            //多节点树自动展开\n            if (this.TREE_MULTI) {\n                jsonData = this.data.defaultOpen([node.id], jsonData);\n                this.indexedNodeScroll = true;\n            }\n            this.indexBarScroll = true;\n            this.setState({searchFocus: false, keyword: node.name, indexId: node.id, jsonData});\n\n\n            this.props.searchItemClick(node || {});\n            e.preventDefault();\n        },\n    };\n\n    checkbox = {\n        //处理复选框\n        handleCheckBox: (node) => {\n            if (!this.props.checkbox) return \"\";\n\n            let selectIconSvg = <Icon name=\"i-buxuan\"/>;\n            let zoom = '';\n            if (node.select === Tree.SELECTED) {\n                selectIconSvg = <Icon name=\"i-xuanzhong\"/>;\n                zoom = 'ya-zoom10-15';\n            } else if (node.select === Tree.SEMI_SELECTED) {\n                selectIconSvg = <Icon name=\"i-banxuan\"/>;\n            }\n            let selectIcon = 'selectIcon ' + zoom;\n            return <span className={selectIcon}\n                         onClick={this.checkbox.checkboxClick.bind(this, node.id)}>{selectIconSvg}</span>;\n        },\n\n        //复选框点击事件\n        checkboxClick: (id, e) => {\n\n            let jsonData = {...this.state.jsonData};\n\n            //设置点击的节点选中状态（只存在选中、不选中，点击后设置为原有状态的反状态）\n            let select;\n            if (jsonData[id].select === Tree.SELECTED) {\n                select = Tree.UNSELECTED;\n            } else {\n                select = Tree.SELECTED;\n            }\n            jsonData[id].select = select;\n\n            //向上改变\n            jsonData = this.data.prevSelect(jsonData, id, select);\n\n            //向下改变\n            jsonData = this.data.nextSelect(jsonData, id, select);\n            this.setState({jsonData});\n\n            //选中的最大父节点们\n            this.props.checkboxClick(this.data.getSelectIds(jsonData));\n\n            e.stopPropagation();\n            e.preventDefault();\n        }\n    };\n\n    operationBtn = {\n        //处理节点操作按钮(编辑、删除)\n        handleOperationBtn: (node) => {\n\n            if (!this.props.operationBtn) return \"\";\n            return <span className=\"btn operationBtn\">\n            <span className=\"btn\" onClick={this.operationBtn.addNode.bind(this, Tree.MOVE_TOP, node)}><Icon\n                name=\"i-top-add\"/></span>\n            <span className=\"btn\" onClick={this.operationBtn.addNode.bind(this, Tree.MOVE_IN, node)}><Icon\n                name=\"i-child-add\"/></span>\n            <span className=\"btn\" onClick={this.operationBtn.addNode.bind(this, Tree.MOVE_BOTTOM, node)}><Icon\n                name=\"i-bottom-add\"/></span>\n            <span className=\"btn\" onClick={this.operationBtn.editBtnClick.bind(this, node.id)}><Icon\n                name=\"i-edit\"/></span>\n            <span className=\"btn\" onClick={this.operationBtn.delBtnClick.bind(this, node.id)}><Icon\n                name=\"i-delete\"/></span>\n        </span>\n        },\n\n        //新建节点\n        addNode: (movePosition, node, e) => {\n\n            let jsonData = {...this.state.jsonData};\n            this.delChangingIds = [];\n            let newNodeId = \"node\" + new Date().getTime();\n            jsonData = this.data.addNode({\n                op: \"add\",\n                id: newNodeId,\n                name: \"new node\",\n                sort: 0,\n                childIds: []\n            }, node, movePosition, jsonData);\n            this.setState({jsonData, editNameId: newNodeId});\n            e.stopPropagation();\n            e.preventDefault();\n        },\n\n        //编辑按钮点击事件\n        editBtnClick: (id, e) => {\n\n            this.setState({editNameId: id});\n            this.props.editBtnClick({...this.state.jsonData}[id]);\n            e.stopPropagation();\n            e.preventDefault();\n        },\n\n        //保存节点名称（包含新增的节点）\n        saveNodeName: (id, e) => {\n            let jsonData = {...this.state.jsonData};\n            jsonData[id].name = this.nameInput.value;\n            if (jsonData[id].op === \"add\") jsonData[id].op = \"added\";\n            this.setState({jsonData, editNameId: \"\"});\n            this.delChangingIds.push(id);\n\n            //节点名称变化的节点\n            let changingNodes = [];\n            if (this.addChangingIds.indexOf(id) === -1) changingNodes.push(jsonData[id]);\n\n            //新增引起的变化节点\n            for (let i in this.addChangingIds) {\n                changingNodes.push(jsonData[this.addChangingIds[i]]);\n                this.addChangingIds = [];\n            }\n            this.props.updateNodes(changingNodes);\n            e.stopPropagation();\n        },\n\n        //退出编辑\n        cancelEditName: (node, e) => {\n            let jsonData = {...this.state.jsonData};\n\n            //取消新增的节点\n            if (node.op === \"add\") {\n                this.data.delNode(node, jsonData);\n            }\n            this.setState({editNameId: \"\", jsonData});\n            e.stopPropagation();\n            e.preventDefault();\n        },\n        //删除\n        delBtnClick: (id, e) => {\n            let jsonData = {...this.state.jsonData};\n            this.data.delNode(jsonData[id], jsonData);\n            this.setState({jsonData});\n\n            this.props.delBtnClick(jsonData[id]);\n\n            e.stopPropagation();\n            e.preventDefault();\n        },\n\n        //右键菜单\n        rightClick: (node, e) => {\n            if (!this.props.rightClickMenu) return;\n\n            //暂时屏蔽右键菜单\n            e.target.parentNode.parentNode.oncontextmenu = function () {\n                return false;\n            };\n\n            //点击其他位置关闭右键菜单\n            let fun = () => {\n                this.setState({rightClickMenu: \"\"});\n            };\n            window.document.removeEventListener(\"click\", fun);\n            window.document.onclick = fun;\n\n            let rightClickMenu = \"\";\n            if (e.button === 2) { //右键\n\n                //设置相对位置\n                let rmcStyle = {\n                    left: e.clientX + 5 + \"px\",\n                    top: e.clientY - e.target.offsetHeight + 10 + \"px\"\n                };\n                rightClickMenu = <div className=\"ya-right-click-menu\" style={rmcStyle}>\n                    <div className=\"fn\" onClick={this.operationBtn.addNode.bind(this, Tree.MOVE_TOP, node)}>在上方新建</div>\n                    <div className=\"fn\" onClick={this.operationBtn.addNode.bind(this, Tree.MOVE_IN, node)}>在节点内新建</div>\n                    <div className=\"fn\" onClick={this.operationBtn.addNode.bind(this, Tree.MOVE_BOTTOM, node)}>在下方新建\n                    </div>\n                    <div className=\"fn\" onClick={this.operationBtn.editBtnClick.bind(this, node.id)}>重命名</div>\n                    <div className=\"fn\" onClick={this.operationBtn.delBtnClick.bind(this, node.id)}>删除</div>\n                </div>;\n            }\n\n            this.setState({rightClickMenu});\n            e.stopPropagation();\n            e.preventDefault();\n        }\n    };\n\n    drag = {\n        //拖拽开始\n        onDragStart: (dragNodeId, e) => {\n            this.dragNodeId = dragNodeId;\n            e.dataTransfer.effectAllowed = \"move\";\n            //自动关闭节点\n            let jsonData = {...this.state.jsonData};\n            if (jsonData[dragNodeId].childIds) {\n                jsonData[dragNodeId].open = false;\n                this.setState({jsonData});\n            }\n        },\n\n        //拖拽结束,元素没有被放置\n        onDragEnd: (dragNodeId, e) => {\n            this.drag.resetDragStyle(e);\n        },\n        //拖拽元素在目标元素头上移动的时候\n        onDragOver: (targetNodeId, e) => {\n            let jsonData = {...this.state.jsonData};\n\n            //单节点树，禁止移动到当前节点的父节点索引上\n            let parentNode = jsonData[jsonData[this.dragNodeId].parentId] || this.rootNode;\n            if (this.TREE_SINGLE && (targetNodeId === parentNode.id || (targetNodeId === false && parentNode === this.rootNode))) return;\n\n            let className = e.currentTarget.className;\n            let pClassName = e.currentTarget.parentNode.className || \"\";\n            if (typeof className === \"string\") {\n                let className = e.currentTarget.className || \"\";\n\n                if (this.dragY !== e.clientY) {\n                    this.dragY = e.clientY;\n\n                    let targetTop = this.drag.getOffset(e.currentTarget, false).top - this.treeBody.scrollTop;\n                    if (this.dragY < (targetTop + 12) && className.indexOf(\"ya-dragTop\") === -1) {\n                        this.dragPosition = Tree.MOVE_TOP;\n                        this.drag.resetDragStyle(e);\n                        e.currentTarget.className += \" ya-dragTop\";\n                    } else if (this.dragY > (targetTop + 12) && this.dragY < (targetTop + e.currentTarget.offsetHeight - 12) && className.indexOf(\"ya-dragIn\") === -1) {\n                        this.dragPosition = Tree.MOVE_IN;\n                        this.drag.resetDragStyle(e);\n                        e.currentTarget.className += \" ya-dragIn\";\n\n                        //自动打开节点\n                        if (this.TREE_MULTI && this.dragNodeId !== targetNodeId) {\n                            if (jsonData[targetNodeId].childIds) {\n                                jsonData[targetNodeId].open = true;\n                                this.setState({jsonData});\n                            }\n                        }\n                    } else if (this.dragY > (targetTop + e.currentTarget.offsetHeight - 12) && className.indexOf(\"ya-dragBottom\") === -1) {\n                        this.dragPosition = Tree.MOVE_BOTTOM;\n                        this.drag.resetDragStyle(e);\n                        e.currentTarget.className += \" ya-dragBottom\";\n                    }\n                    console.log(targetNodeId, this.dragPosition, \"拖动元素top: \" + this.dragY, \"目标元素高度: \" + targetTop, \"目标元素高：\" + e.currentTarget.offsetHeight, \"滚动top：\" + this.treeBody.scrollTop);\n                }\n            } else if (typeof className === \"string\" && className.indexOf(\"indexBarName\") > -1) {\n                if (e.currentTarget.className.indexOf(\"ya-dragIn\") === -1) e.currentTarget.className += \" ya-dragIn\";\n            } else if (typeof pClassName === \"string\" && pClassName.indexOf(\"indexBarName\") > -1) {\n                //兼容单节点树，拖动到主页icon上\n                if (pClassName.indexOf(\"ya-dragIn\") === -1) e.currentTarget.parentNode.className += \" ya-dragIn\";\n            }\n            e.preventDefault();\n        },\n\n        //拖动离开目标元素\n        onDragLeave: (targetNodeId, e) => {\n            //移除onDragEnter样式\n            this.drag.resetDragStyle(e);\n        },\n\n        //拖拽元素进入目标元素头上，同时鼠标松开的时候\n        onDrop: (targetNodeId, e) => {\n            //重置样式\n            this.drag.resetDragStyle(e);\n\n            //节点改变\n            this.data.moveNode(this.dragNodeId, targetNodeId, this.dragPosition);\n\n            e.preventDefault();\n        },\n\n        //获取相对窗口的top值\n        getOffset: (target, offset) => {\n            if (!offset) {\n                offset = {};\n                offset.top = 0;\n                offset.left = 0;\n            }\n            if (target === document.body || !target) {\n                //当该节点为body节点时，结束递归\n                offset.top -= window.scrollY;\n                offset.left -= window.scrollX;\n                return offset;\n            }\n            offset.top += target.offsetTop - target.scrollTop;\n            offset.left += target.offsetLeft - target.scrollLeft;\n            return this.drag.getOffset(target.offsetParent, offset);//向上累加offset里的值\n        },\n\n        //重置拖动\n        resetDragStyle: (e) => {\n            if (e.currentTarget) {\n                let className = e.currentTarget.className || \"\";\n                let pClassName = e.currentTarget.parentNode.className || \"\";\n                if (typeof className === \"string\" && className.indexOf(\"ya-dragTop\") > -1) e.currentTarget.className = className.replace(\" ya-dragTop\", \"\");\n                if (typeof className === \"string\" && className.indexOf(\"ya-dragBottom\") > -1) e.currentTarget.className = className.replace(\" ya-dragBottom\", \"\");\n                if (typeof className === \"string\" && className.indexOf(\"ya-dragIn\") > -1) e.currentTarget.className = className.replace(\" ya-dragIn\", \"\");\n                //兼容单节点树，拖动到主页icon上\n                if (typeof pClassName === \"string\" && pClassName.indexOf(\"ya-dragIn\") > -1) e.currentTarget.parentNode.className = pClassName.replace(\" ya-dragIn\", \"\");\n            }\n        },\n    };\n\n    //自动滚动\n    autoScroll() {\n        //索引调自动滚动到最后\n        if (this.lastIndexBarItem && this.indexBarScroll) this.lastIndexBarItem.scrollIntoView({\n            block: \"center\",\n            inline: \"end\"\n        });\n\n        //树自动滚动到被索引的节点\n        if (this.indexedNode && this.indexedNodeScroll) this.indexedNode.scrollIntoView({\n            block: \"center\",\n            inline: \"nearest\"\n        });\n\n        this.indexBarScroll = false;\n        this.indexedNodeScroll = false;\n    }\n\n    customize = {\n        //[定制功能]功能]渲染追加的节点\n        nodeAddList: (id, jsonData) => {\n            if (typeof this.props.addNodeFun !== \"function\") return null;\n            let addNodeList = jsonData[id].addNodeList;\n            if (!addNodeList) return null;\n\n            let node = jsonData[id];\n\n            // 根据层级缩进\n            let itemStyle = {\n                paddingLeft: 22 * node.level + 'px',\n            };\n\n            let addItem = addNodeList.map((item, key) => {\n                return <div id={node.id} key={key} className=\"node nodeAdd\">\n                    <div className=\"node-content\" style={itemStyle}\n                         onClick={this.customize.addNodeClick.bind(this, item)}>\n                        <span className=\"openIcon\"> </span>\n                        <input type=\"radio\" className=\"addNodeRadio\" checked={this.state.addNodeSelectId === item.id}\n                               onChange={ignore => {\n                                   return true\n                               }}/>\n                        <span className=\"nodeName\">{item.name}</span>\n                    </div>\n                </div>\n            });\n            return <div className=\"nodeAddList\">{addItem}</div>\n        },\n        //[定制功能]追加节点\n        addNodeFun: (id, jsonData) => {\n            let addNodeList = this.props.addNodeFun(id);\n\n            if (jsonData[id] && addNodeList) jsonData[id].addNodeList = addNodeList;\n            this.setState({jsonData});\n        },\n        //[定制功能]点击追加的节点\n        addNodeClick: (node) => {\n            this.setState({addNodeSelectId: node.id});\n            this.props.addNodeClick(node);\n        }\n    };\n\n}\n\nexport {Tree};"]}