{"version":3,"sources":["../../src/components/Tree/TreeUtil.js"],"names":["nodIcons","testTreeData","level","everyLevel","type","treeData","parentIds","childNum","Math","ceil","random","thisLevelIds","thisLevelI","length","i","indexOf","push","parentIndex","floor","parentId","id","substr","icon","node","name","sort","hasNodeMark","console","log","testSelectedIdsData","selectedNodeNum","selectedNodes","index","textNodeAddList","num","list","idList","asyncHasChild","getNavData","navData","titleList","window","document","getElementsByClassName","hList","innerText","tagName","replace","obj"],"mappings":";;;;;;;AACA;;;;AACA;;;;;;AAFA;AAIA,IAAIA,WAAW,CAAC,8BAAC,cAAD,IAAM,MAAK,aAAX,GAAD,EAA6B,8BAAC,cAAD,IAAM,MAAK,cAAX,GAA7B,EAA0D,8BAAC,cAAD,IAAM,MAAK,YAAX,GAA1D,EACX,8BAAC,cAAD,IAAM,MAAK,YAAX,GADW,CAAf;AAEO,IAAIC,sCAAe,SAAfA,YAAe,CAACC,KAAD,EAAQC,UAAR,EAAoBC,IAApB,EAA6B;AACnD,QAAIC,WAAW,EAAf;;AAEA;AACA,QAAIC,YAAY,EAAhB;AACA,WAAOJ,QAAQ,CAAf,EAAkB;AACd;AACA,YAAIK,WAAWC,KAAKC,IAAL,CAAUD,KAAKE,MAAL,KAAgBP,UAA1B,CAAf,CAFc,CAEuC;AACrD,YAAIQ,eAAe,EAAnB;;AAEA,YAAIC,aAAa,EAAjB;AACA,eAAOD,aAAaE,MAAb,GAAsBN,QAA7B,EAAuC;AACnC;AACA,gBAAIO,IAAIN,KAAKC,IAAL,CAAUD,KAAKE,MAAL,KAAgBH,QAA1B,CAAR;AACA,gBAAIK,WAAWG,OAAX,CAAmBD,CAAnB,MAA0B,CAAC,CAA/B,EAAkC;AAAC;AAC/BF,2BAAWI,IAAX,CAAgBF,CAAhB;;AAEA,oBAAIG,cAAcT,KAAKU,KAAL,CAAWV,KAAKE,MAAL,KAAgBJ,UAAUO,MAArC,CAAlB;AACA,oBAAIM,WAAWb,UAAUW,WAAV,KAA0B,EAAzC;AACA,oBAAIG,KAAKD,WAAWA,WAAW,GAAX,GAAiBL,CAA5B,GAAgCA,CAAzC;AACA,oBAAIM,GAAG,CAAH,MAAU,GAAd,EAAmBA,KAAKA,GAAGC,MAAH,CAAU,CAAV,CAAL;;AAEnB,oBAAIC,OAAOtB,SAASQ,KAAKU,KAAL,CAAWV,KAAKE,MAAL,KAAgBV,SAASa,MAApC,CAAT,CAAX;AACA,oBAAGT,SAAS,MAAZ,EAAqBkB,OAAO,EAAP;AACrB,oBAAIC,OAAO;AACPH,wBAAIA,EADG;AAEPD,8BAAUA,QAFH;AAGPK,0BAAM,YAAYJ,EAHX;AAIPK,0BAAMjB,KAAKC,IAAL,CAAUD,KAAKE,MAAL,KAAgBP,UAA1B,CAJC,EAIqC;AAC5CmB,8BALO;AAMPI,iCAActB,SAAS,MAAT,IAAmBI,KAAKU,KAAL,CAAWV,KAAKE,MAAL,KAAgB,CAA3B,MAAkC,CAArD,GAAyD,IAAzD,GAAgE;AANvE,iBAAX;AAQAL,yBAASW,IAAT,CAAcO,IAAd;AACAZ,6BAAaK,IAAb,CAAkBI,EAAlB;AACH;AACJ;AACDd,oBAAYK,YAAZ;AACAT;AACH;AACDyB,YAAQC,GAAR,CAAY,WAAZ,EAAyBvB,QAAzB;AACA,WAAOA,QAAP;AACH,CAzCM;;AA2CP;AACO,IAAIwB,oDAAsB,SAAtBA,mBAAsB,CAACxB,QAAD,EAAWyB,eAAX,EAA+B;AAC5D,QAAGzB,SAASQ,MAAT,GAAkBiB,eAArB,EAAsCA,kBAAkBzB,SAASQ,MAA3B;AACtC,QAAIkB,gBAAgB,EAApB;AACA,WAAOA,cAAclB,MAAd,GAAuBiB,eAA9B,EAA+C;AAC3C,YAAIE,QAAQxB,KAAKU,KAAL,CAAWV,KAAKE,MAAL,KAAgBL,SAASQ,MAApC,CAAZ;AACA,YAAIO,KAAKf,SAAS2B,KAAT,EAAgBZ,EAAzB;AACA,YAAIW,cAAchB,OAAd,CAAsBK,EAAtB,MAA8B,CAAC,CAAnC,EAAsC;AAClCW,0BAAcf,IAAd,CAAmBI,EAAnB;AACH;AACJ;AACDO,YAAQC,GAAR,CAAY,cAAZ,EAA4BG,aAA5B;AACA,WAAOA,aAAP;AAEH,CAbM;;AAeP;AACO,IAAIE,4CAAkB,SAAlBA,eAAkB,CAACd,QAAD,EAAWe,GAAX,EAAmB;AAC5C,QAAIC,OAAO,EAAX;AACA,QAAIC,SAAS,EAAb;AACA,WAAOD,KAAKtB,MAAL,GAAcqB,GAArB,EAA0B;AACtB,YAAId,KAAKD,WAAW,IAAX,GAAkBX,KAAKC,IAAL,CAAUD,KAAKE,MAAL,KAAgBwB,GAA1B,CAA3B;AACA,YAAIE,OAAOrB,OAAP,CAAeK,EAAf,MAAuB,CAAC,CAA5B,EAA+B;AAC3Be,iBAAKnB,IAAL,CAAU;AACNI,oBAAIA,EADE;AAENI,sBAAMJ,EAFA;AAGND,0BAAUA,QAHJ;AAINkB,+BAAe;AAJT,aAAV;AAMAD,mBAAOpB,IAAP,CAAYI,EAAZ;AACH;AACJ;AACD,WAAOe,IAAP;AACH,CAhBM;;AAkBA,IAAIG,kCAAa,SAAbA,UAAa,GAAM;AAC1B;AACA,QAAIC,UAAU,EAAd;AACA,QAAIC,YAAYC,OAAOC,QAAP,CAAgBC,sBAAhB,CAAuC,UAAvC,CAAhB;AACA,QAAIC,QAAQ,EAAZ;AACA,SAAK,IAAI9B,IAAI,CAAb,EAAgBA,IAAI0B,UAAU3B,MAA9B,EAAsCC,GAAtC,EAA2C;AACvC,YAAIM,KAAKoB,UAAU1B,CAAV,EAAa+B,SAAtB;AACA,YAAIC,UAAUN,UAAU1B,CAAV,EAAagC,OAA3B;AACA,YAAI5C,QAAQ4C,QAAQC,OAAR,CAAgB,GAAhB,EAAqB,EAArB,CAAZ;AACAH,cAAM1C,KAAN,IAAekB,EAAf;AACAmB,gBAAQvB,IAAR,CAAa;AACTI,gBAAIA,EADK;AAETI,kBAAMJ,EAFG;AAGTD,sBAAUyB,MAAM1C,QAAQ,CAAd,CAHD;AAIT8C,iBAAKR,UAAU1B,CAAV,CAJI;AAKTW,kBAAMX;AALG,SAAb;AAOH;AACDa,YAAQC,GAAR,CAAY,UAAZ,EAAuBW,OAAvB;;AAEA,WAAOA,OAAP;AACH,CArBM","file":"TreeUtil.js","sourcesContent":["//生成树的测试数据（level100,everyLevel100,总节点约1w个）\nimport Icon from \"../utils/Icon\";\nimport React from \"react\";\n\nlet nodIcons = [<Icon name=\"i-file-word\"/>, <Icon name=\"i-file-excel\"/>, <Icon name=\"i-file-ppt\"/>,\n    <Icon name=\"i-file-ppt\"/>];\nexport var testTreeData = (level, everyLevel, type) => {\n    let treeData = [];\n\n    //记录上层ids\n    let parentIds = [];\n    while (level > 0) {\n        //循环多少层\n        let childNum = Math.ceil(Math.random() * everyLevel);//每层随机多少个节点\n        let thisLevelIds = [];\n\n        let thisLevelI = [];\n        while (thisLevelIds.length < childNum) {\n            //每层生成的节点\n            let i = Math.ceil(Math.random() * childNum);\n            if (thisLevelI.indexOf(i) === -1) {//去重\n                thisLevelI.push(i);\n\n                let parentIndex = Math.floor(Math.random() * parentIds.length);\n                let parentId = parentIds[parentIndex] || \"\";\n                let id = parentId ? parentId + \"-\" + i : i;\n                if (id[0] === '-') id = id.substr(1);\n\n                let icon = nodIcons[Math.floor(Math.random() * nodIcons.length)];\n                if(type === \"file\")  icon = \"\";\n                let node = {\n                    id: id,\n                    parentId: parentId,\n                    name: \"节点node \" + id,\n                    sort: Math.ceil(Math.random() * everyLevel),//排序\n                    icon,\n                    hasNodeMark : type === \"file\" && Math.floor(Math.random() * 3) === 1 ? true : \"\"\n                };\n                treeData.push(node);\n                thisLevelIds.push(id);\n            }\n        }\n        parentIds = thisLevelIds;\n        level--;\n    }\n    console.log(\"生成树的测试数据:\", treeData);\n    return treeData;\n};\n\n//生成默认选中的测试数据\nexport var testSelectedIdsData = (treeData, selectedNodeNum) => {\n    if(treeData.length < selectedNodeNum) selectedNodeNum = treeData.length;\n    let selectedNodes = [];\n    while (selectedNodes.length < selectedNodeNum) {\n        let index = Math.floor(Math.random() * treeData.length);\n        let id = treeData[index].id;\n        if (selectedNodes.indexOf(id) === -1) {\n            selectedNodes.push(id);\n        }\n    }\n    console.log(\"生成默认选中的测试数据:\", selectedNodes);\n    return selectedNodes;\n\n};\n\n//生成追加的节点测试数据\nexport var textNodeAddList = (parentId, num) => {\n    let list = [];\n    let idList = [];\n    while (list.length < num) {\n        let id = parentId + \"--\" + Math.ceil(Math.random() * num);\n        if (idList.indexOf(id) === -1) {\n            list.push({\n                id: id,\n                name: id,\n                parentId: parentId,\n                asyncHasChild: true,\n            });\n            idList.push(id);\n        }\n    }\n    return list;\n};\n\nexport var getNavData = () => {\n    //获取导航栏树数据\n    let navData = [];\n    let titleList = window.document.getElementsByClassName(\"ya-title\");\n    let hList = [];\n    for (let i = 0; i < titleList.length; i++) {\n        let id = titleList[i].innerText;\n        let tagName = titleList[i].tagName;\n        let level = tagName.replace(\"H\", \"\");\n        hList[level] = id;\n        navData.push({\n            id: id,\n            name: id,\n            parentId: hList[level - 1],\n            obj: titleList[i],\n            sort: i\n        });\n    }\n    console.log(\"navData:\",navData);\n\n    return navData;\n};"]}